#include<stdio.h>
#include<stdlib.h>
typedef struct node{
    int info;
    struct node * next;
}node;

node * insert(node * head){
    int val;
    printf("Enter the value");
    scanf("%d",&val);
    node * p;
    p=(node *)malloc(sizeof(node));
    p->info=val;
    p->next=NULL;
    if(head==NULL){
        head=p;
    }
    else{
        node * temp=head;
        while(temp->next!=NULL){
            temp=temp->next;
        }
        temp->next=p;
    }
    return head;
}
void display(node * head){
    node * temp=head;
    while(temp!=NULL){
        printf("%d ",temp->info);
        temp=temp->next;
    }
}
void displaypalindrome(node * head){
    node * temp=head;
    int temp1,rev,digit;
    while(temp!=NULL){
        temp1=temp->info;
        rev=0;
        while(temp1>0){
            digit=temp1%10;
            rev=rev*10+digit;
            temp1=temp1/10;
        }
        if(rev==temp->info){
            printf("%d ",temp->info);
        }
        temp=temp->next;
    }
}
node * deletenode(node * head,int n){
    node * temp=head;
    if(n==0){
        printf("delete element is %d",temp->info);
        head=head->next;
        free(temp);
    }
    else{
    for(int i=0;i<n-1;i++){
        temp=temp->next;
    }
    printf("delete element is %d",temp->next->info);
    temp->next=temp->next->next;
    }
    return head;
}
node * addnode(node * head,int n){
    node *p;
    int val;
    scanf("%d",&val);
    p=(node*)malloc(sizeof(node));
    p->info=val;
    p->next=NULL;
    node * temp=head;
    if(n==0){
        p->next=head;
        head=p;
    }
    else{
    for(int i=0;i<n;i++){
        temp=temp->next;
    }
    p->next=temp->next;
    temp->next=p;
    return head;
    }
}
int nodecount(node * head){
    node * temp=head;
    int count=0;
    while(temp!=NULL){
        temp=temp->next;
        count++;
    }
    return count;
}
node * deletemid(node * head){
    if(head==NULL){
        return NULL;
    }
    if(head->next==NULL){
        free(head);
        return NULL;
    }
    node * temp=head;
    int c=nodecount(head);
    int mid=c/2;
    for(int i=0;i<mid-1;i++){
        temp=temp->next;
    }
    temp->next=temp->next->next;
    return head;
}
int search(node * head,int key){
    node * temp=head;
    int count=0;
    while(temp!=NULL){
        count++;
        if(temp->info==key){
            return count;
        }
        temp=temp->next;
    }
    return -1;
}
void displayprime(node * head){
    node * temp=head;
    while(temp!=NULL){
        int count=0;
        for(int i=1;i<=temp->info;i++){
            if(temp->info%i==0){
                count++;
            }
        }
        if(count==2){
            printf("%d ",temp->info);
        }
        temp=temp->next;
    }
}
node * reverse(node * head){
    node * p=head;
    node * q,*r=NULL;
    while(p!=NULL){
        r=q;
        q=p;
        p=p->next;
        q->next=r;
    }
    return q;
}
void deleteduplicate(node * head){
    node * temp=head;
    while(temp->next!=NULL){
        if(temp->info==temp->next->info){
            temp->next=temp->next->next;
        }
        else if(temp->info==temp->next->info&&temp->next->next==NULL){
            free(temp);
        }
        temp=temp->next;
    }
}
node * rotate(node * head,int k){
    if(head==NULL){
        return head;
    }
    node * temp=head;
    int len=1;
    while(temp->next!=NULL){
        temp=temp->next;
        len++;
    }
    if(k>len){
        k=k%len;
    }
    k=len-k;
    if(k==0||k==len){
        return head;
    }
    node * current=head;
    int count=1;
    while(count<k&&current!=NULL){
        current=current->next;
        count++;
    }
    if(current==NULL){
        return head;
    }
    node * kn=current;
    temp->next=head;
    head=kn->next;
    kn->next=NULL;
    return head;
}
node * leftrotate(node * head,int k){
    if(k==0){
        return head;
    }
    node * current=head;
    int count=1;
    while(count<k&&current!=NULL){
        current=current->next;
        count++;
    }
    if(current==NULL){
        return head;
    }
    node * kn=current;
    while(current->next!=NULL){
        current=current->next;
    }
    current->next=head;
    head=kn->next;
    kn->next=NULL;
    return head;
}
void createcycle(node * head,int k){
    node * temp=head;
    int count=1;
    while(count<k){
        temp=temp->next;
        count++;
    }
    node * kn=temp;
    while(temp->next!=NULL){
        temp=temp->next;
    }
    temp->next=kn;

}
_Bool detectcycle(node * head){
    node * slow=head;
    node * fast=head;
    while(fast!=NULL && slow!=NULL && fast->next!=NULL){
        slow=slow->next;
        fast=fast->next->next;
        if(slow==fast){
            printf("Cycle detected");
            return free;
        }
    }
    printf("NO cycle");
    return fast;

}
node * intersect(node * head,node * head1,int pos){
    node * temp1=head;
    node * temp2=head1;
    int i=1;
    for(i=1;i<pos;i++){
        temp1=temp1->next;
    }
    while(temp2->next!=NULL){
        temp2=temp2->next;
    }
    temp2->next=temp1;
    return head1;
}
node * intersectioncheck(node * head,node * head1){
    node * t1,*t2;
    t1=head;
    while(t1!=NULL){
        t2=head1;
        while(t2!=NULL){
            if(t1==t2){
                return t1;
            }
            t2=t2->next;
        }
        t1=t1->next;
    }
    return NULL;

}
node * deletenth(node * head,int n){
    node * temp=head;
    node * current=head;
    int size=1;
    while(temp->next!=NULL){
        temp=temp->next;
        size++;
    }
    int x=size-n;
    if(n==size){
        head=head->next;
        temp->next=NULL;
    }
    else{
        for(int i=1;i<x;i++){
            current=current->next;
        }
        current->next=current->next->next;
    }
    return head;
}
node * swappairs(node * head){
    if(head==NULL||head->next==NULL){
        return head;
    }
    node * dummy=(node *)malloc(sizeof(node));
    node * prev=dummy;
    node * current=head;
    while(current!=NULL && current->next!=NULL){
        prev->next=current->next;
        current->next=prev->next->next;
        prev->next->next=current;
        prev=current;
        current=current->next;
    }
    return dummy->next;
}
node * reversebetween(node * head,int m,int n){
    if(m==n){
        return head;
    }
    node * rev,* revend,* rev_prev,* rev_next=NULL;
    int i=1;
    node * current=head;
    while(current&&i<=n){
        if(i<m){
            rev_prev=current;
        }
        if(i==m){
            rev=current;
        }
        if(i==n){
            revend=current;
            rev_next=current->next;
        }
        current=current->next;
        i++;
    }
    revend->next=NULL;
    revend=reverse(rev);
    if(rev_prev){
        rev_prev->next=revend;
    }
    else{
        head=revend;
    }
    rev->next=rev_next;
    return head;
}
int main(){
    int ch,n,x,y,z,key,k,k1,k2,a,b,pos,n1,m,o;
    _Bool t;
    node * x1;
    node * head=NULL;
    node * head1=NULL;
        do{
        printf("\n 1 For Insert // 2 For Display// 3 For delete //4 insert node //5 for node count//6 For searching//7 For prime no//8 For palindrome//9 for reverse//10 delete duplicate//11 delete mid//12 right rotation//13 left rotation//14 Create cycle//15 Detect cycle//16 For intersection\\17 Intersection check//18 delete from right//19 swap pairs//20 reverse bw interval\n");
        printf("Enter your choice:");
        scanf("%d",&ch);
        switch(ch){
            case 1:
                printf("Enter 1 for 1st and 2 for 2nd");
                //scanf("%d",&a);
                //if(a==1){
                    head=insert(head);
                //}
                //else if(a==2){
                    //head1=insert(head1);
                //}
                break;
            case 2:
                display(head);
                break;
            case 3:
                printf("enter node you want to delete:");
                scanf("%d",&n);
                head=deletenode(head,n);
                break;
            case 4:
                printf("enter the node after which you want to add node");
                scanf("%d",&x);
                head=addnode(head,x);
                break;
            case 5:
                y=nodecount(head);
                printf("total nodes=%d",y);
                break;
            case 6:
                printf("Enter key");
                scanf("%d",&key);
                y=search(head,key);
                if(y==-1){
                    printf("Element found not found");
                }
                else{
                    printf("Element found at :%d",y);
                }

                break;
            case 7:
                displayprime(head);
                break;
            case 8:
                displaypalindrome(head);
                break;
            case 9:
                head=reverse(head);
                break;
            case 10:
                deleteduplicate(head);
                break;
            case 11:
                head=deletemid(head);
                break;
            case 12:
                printf("enter rotation:");
                scanf("%d",&k);
                head=rotate(head,k);
                break;
            case 13:
                printf("enter rotation:");
                scanf("%d",&k1);
                head=leftrotate(head,k1);
                break;
            case 14:
                printf("enter node at which you want cycle:");
                scanf("%d",&k2);
                createcycle(head,k2);
                break;
            case 15:
                t=detectcycle(head);
                break;
            case 16:
                printf("Enter position:");
                scanf("%d",&pos);
                head1=intersect(head,head1,pos);
                break;
            case 17:
                x1=intersectioncheck(head,head1);
                printf("%d",x1->info);
                break;
            case 18:
                printf("Enter node to delete:");
                scanf("%d",&n1);
                head=deletenth(head,n1);
                break;
            case 19:
                head=swappairs(head);
                break;
            case 20:
                printf("Enter value");
                scanf("%d %d",&m,&o);
                head=reversebetween(head,m,o);
                break;
            case 21:
                exit(0);
                break;
        }
    }while(1);
    return 0;
}

